{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lelic\\\\Desktop\\\\Zavrsniprojekat\\\\frontend\\\\src\\\\AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nimport jwt_decode from \"jwt-decode\";\nimport { useNavigate } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const navigate = useNavigate();\n  let [user, setUser] = useState(() => localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null);\n  let [authToken, setAuthToken] = useState(() => localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null);\n\n  const loginUser = async e => {\n    e.preventDefault();\n    let api = await fetch('/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'username': e.target.username.value,\n        'password': e.target.password.value\n      })\n    });\n    let data = await api.json();\n\n    if (api.status === 200) {\n      setAuthToken(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem('authTokens', JSON.stringify(data));\n      navigate('../');\n    } else {\n      alert('Check username or password!');\n    }\n  };\n\n  const logoutUser = () => {\n    setAuthToken(null);\n    setUser(null);\n    localStorage.removeItem('authTokens');\n    navigate('../');\n  };\n\n  let contextData = {\n    user: user,\n    loginUser: loginUser,\n    logoutUser: logoutUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"b9k1t3tGejki47bj0EB9IxfpNJg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","jwt_decode","useNavigate","AuthContext","AuthProvider","children","navigate","user","setUser","localStorage","getItem","authToken","setAuthToken","JSON","parse","loginUser","e","preventDefault","api","fetch","method","headers","body","stringify","target","username","value","password","data","json","status","access","setItem","alert","logoutUser","removeItem","contextData"],"sources":["C:/Users/lelic/Desktop/Zavrsniprojekat/frontend/src/AuthContext.js"],"sourcesContent":["import { createContext,useState,useEffect } from \"react\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useNavigate } from \"react-router\";\r\nconst AuthContext = createContext()\r\nexport default AuthContext;\r\n\r\nexport const AuthProvider = ({children})  => {\r\n    const navigate = useNavigate()\r\n    let [user,setUser] = useState(() => localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) : null)\r\n    let [authToken,setAuthToken] = useState(() => localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null)\r\n    \r\n    const loginUser = async(e) => {\r\n        e.preventDefault()\r\n            let api =  await fetch('/api/token',{\r\n                method:'POST',\r\n                headers:{\r\n                    'Content-Type':'application/json'\r\n                },\r\n                body:JSON.stringify({'username':e.target.username.value,'password':e.target.password.value})\r\n            })\r\n            let data = await api.json()\r\n            if (api.status === 200){\r\n                setAuthToken(data)\r\n                setUser(jwt_decode(data.access))\r\n                localStorage.setItem('authTokens',JSON.stringify(data))\r\n                navigate('../')\r\n            }else{\r\n                alert('Check username or password!')\r\n            }\r\n    }\r\n    const logoutUser = () => {\r\n        setAuthToken(null)\r\n        setUser(null)\r\n        localStorage.removeItem('authTokens')\r\n        navigate('../')\r\n    }\r\n\r\n    let contextData = {\r\n        user:user,\r\n        loginUser:loginUser,\r\n        logoutUser:logoutUser\r\n    }\r\n    return(\r\n        <AuthContext.Provider value={contextData} >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n\r\n}"],"mappings":";;;AAAA,SAASA,aAAT,EAAuBC,QAAvB,EAAgCC,SAAhC,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,WAAT,QAA4B,cAA5B;;AACA,MAAMC,WAAW,gBAAGL,aAAa,EAAjC;AACA,eAAeK,WAAf;AAEA,OAAO,MAAMC,YAAY,GAAG,QAAiB;EAAA;;EAAA,IAAhB;IAACC;EAAD,CAAgB;EACzC,MAAMC,QAAQ,GAAGJ,WAAW,EAA5B;EACA,IAAI,CAACK,IAAD,EAAMC,OAAN,IAAiBT,QAAQ,CAAC,MAAMU,YAAY,CAACC,OAAb,CAAqB,YAArB,IAAqCT,UAAU,CAACQ,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAD,CAA/C,GAAsF,IAA7F,CAA7B;EACA,IAAI,CAACC,SAAD,EAAWC,YAAX,IAA2Bb,QAAQ,CAAC,MAAMU,YAAY,CAACC,OAAb,CAAqB,YAArB,IAAqCG,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAX,CAArC,GAAsF,IAA7F,CAAvC;;EAEA,MAAMK,SAAS,GAAG,MAAMC,CAAN,IAAY;IAC1BA,CAAC,CAACC,cAAF;IACI,IAAIC,GAAG,GAAI,MAAMC,KAAK,CAAC,YAAD,EAAc;MAChCC,MAAM,EAAC,MADyB;MAEhCC,OAAO,EAAC;QACJ,gBAAe;MADX,CAFwB;MAKhCC,IAAI,EAACT,IAAI,CAACU,SAAL,CAAe;QAAC,YAAWP,CAAC,CAACQ,MAAF,CAASC,QAAT,CAAkBC,KAA9B;QAAoC,YAAWV,CAAC,CAACQ,MAAF,CAASG,QAAT,CAAkBD;MAAjE,CAAf;IAL2B,CAAd,CAAtB;IAOA,IAAIE,IAAI,GAAG,MAAMV,GAAG,CAACW,IAAJ,EAAjB;;IACA,IAAIX,GAAG,CAACY,MAAJ,KAAe,GAAnB,EAAuB;MACnBlB,YAAY,CAACgB,IAAD,CAAZ;MACApB,OAAO,CAACP,UAAU,CAAC2B,IAAI,CAACG,MAAN,CAAX,CAAP;MACAtB,YAAY,CAACuB,OAAb,CAAqB,YAArB,EAAkCnB,IAAI,CAACU,SAAL,CAAeK,IAAf,CAAlC;MACAtB,QAAQ,CAAC,KAAD,CAAR;IACH,CALD,MAKK;MACD2B,KAAK,CAAC,6BAAD,CAAL;IACH;EACR,CAlBD;;EAmBA,MAAMC,UAAU,GAAG,MAAM;IACrBtB,YAAY,CAAC,IAAD,CAAZ;IACAJ,OAAO,CAAC,IAAD,CAAP;IACAC,YAAY,CAAC0B,UAAb,CAAwB,YAAxB;IACA7B,QAAQ,CAAC,KAAD,CAAR;EACH,CALD;;EAOA,IAAI8B,WAAW,GAAG;IACd7B,IAAI,EAACA,IADS;IAEdQ,SAAS,EAACA,SAFI;IAGdmB,UAAU,EAACA;EAHG,CAAlB;EAKA,oBACI,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEE,WAA7B;IAAA,UACK/B;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAMH,CA1CM;;GAAMD,Y;UACQF,W;;;KADRE,Y"},"metadata":{},"sourceType":"module"}